// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/demo/local/model"
)

func newCjOperation(db *gorm.DB, opts ...gen.DOOption) cjOperation {
	_cjOperation := cjOperation{}

	_cjOperation.cjOperationDo.UseDB(db, opts...)
	_cjOperation.cjOperationDo.UseModel(&model.CjOperation{})

	tableName := _cjOperation.cjOperationDo.TableName()
	_cjOperation.ALL = field.NewAsterisk(tableName)
	_cjOperation.ID = field.NewInt32(tableName, "id")
	_cjOperation.OperatorID = field.NewInt32(tableName, "operator_id")
	_cjOperation.OperateAt = field.NewTime(tableName, "operate_at")
	_cjOperation.OperateSummary = field.NewString(tableName, "operate_summary")

	_cjOperation.fillFieldMap()

	return _cjOperation
}

type cjOperation struct {
	cjOperationDo cjOperationDo

	ALL            field.Asterisk
	ID             field.Int32
	OperatorID     field.Int32
	OperateAt      field.Time
	OperateSummary field.String

	fieldMap map[string]field.Expr
}

func (c cjOperation) Table(newTableName string) *cjOperation {
	c.cjOperationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjOperation) As(alias string) *cjOperation {
	c.cjOperationDo.DO = *(c.cjOperationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjOperation) updateTableName(table string) *cjOperation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.OperatorID = field.NewInt32(table, "operator_id")
	c.OperateAt = field.NewTime(table, "operate_at")
	c.OperateSummary = field.NewString(table, "operate_summary")

	c.fillFieldMap()

	return c
}

func (c *cjOperation) WithContext(ctx context.Context) *cjOperationDo {
	return c.cjOperationDo.WithContext(ctx)
}

func (c cjOperation) TableName() string { return c.cjOperationDo.TableName() }

func (c cjOperation) Alias() string { return c.cjOperationDo.Alias() }

func (c cjOperation) Columns(cols ...field.Expr) gen.Columns { return c.cjOperationDo.Columns(cols...) }

func (c *cjOperation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjOperation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 4)
	c.fieldMap["id"] = c.ID
	c.fieldMap["operator_id"] = c.OperatorID
	c.fieldMap["operate_at"] = c.OperateAt
	c.fieldMap["operate_summary"] = c.OperateSummary
}

func (c cjOperation) clone(db *gorm.DB) cjOperation {
	c.cjOperationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjOperation) replaceDB(db *gorm.DB) cjOperation {
	c.cjOperationDo.ReplaceDB(db)
	return c
}

type cjOperationDo struct{ gen.DO }

func (c cjOperationDo) Debug() *cjOperationDo {
	return c.withDO(c.DO.Debug())
}

func (c cjOperationDo) WithContext(ctx context.Context) *cjOperationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjOperationDo) ReadDB() *cjOperationDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjOperationDo) WriteDB() *cjOperationDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjOperationDo) Session(config *gorm.Session) *cjOperationDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjOperationDo) Clauses(conds ...clause.Expression) *cjOperationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjOperationDo) Returning(value interface{}, columns ...string) *cjOperationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjOperationDo) Not(conds ...gen.Condition) *cjOperationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjOperationDo) Or(conds ...gen.Condition) *cjOperationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjOperationDo) Select(conds ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjOperationDo) Where(conds ...gen.Condition) *cjOperationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjOperationDo) Order(conds ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjOperationDo) Distinct(cols ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjOperationDo) Omit(cols ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjOperationDo) Join(table schema.Tabler, on ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjOperationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjOperationDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjOperationDo) Group(cols ...field.Expr) *cjOperationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjOperationDo) Having(conds ...gen.Condition) *cjOperationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjOperationDo) Limit(limit int) *cjOperationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjOperationDo) Offset(offset int) *cjOperationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjOperationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjOperationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjOperationDo) Unscoped() *cjOperationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjOperationDo) Create(values ...*model.CjOperation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjOperationDo) CreateInBatches(values []*model.CjOperation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjOperationDo) Save(values ...*model.CjOperation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjOperationDo) First() (*model.CjOperation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjOperation), nil
	}
}

func (c cjOperationDo) Take() (*model.CjOperation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjOperation), nil
	}
}

func (c cjOperationDo) Last() (*model.CjOperation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjOperation), nil
	}
}

func (c cjOperationDo) Find() ([]*model.CjOperation, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjOperation), err
}

func (c cjOperationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjOperation, err error) {
	buf := make([]*model.CjOperation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjOperationDo) FindInBatches(result *[]*model.CjOperation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjOperationDo) Attrs(attrs ...field.AssignExpr) *cjOperationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjOperationDo) Assign(attrs ...field.AssignExpr) *cjOperationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjOperationDo) Joins(fields ...field.RelationField) *cjOperationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjOperationDo) Preload(fields ...field.RelationField) *cjOperationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjOperationDo) FirstOrInit() (*model.CjOperation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjOperation), nil
	}
}

func (c cjOperationDo) FirstOrCreate() (*model.CjOperation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjOperation), nil
	}
}

func (c cjOperationDo) FindByPage(offset int, limit int) (result []*model.CjOperation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjOperationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjOperationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjOperationDo) Delete(models ...*model.CjOperation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjOperationDo) withDO(do gen.Dao) *cjOperationDo {
	c.DO = *do.(*gen.DO)
	return c
}
