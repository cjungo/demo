// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package entity

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cjungo/demo/model"
)

func newCjProductOperation(db *gorm.DB, opts ...gen.DOOption) cjProductOperation {
	_cjProductOperation := cjProductOperation{}

	_cjProductOperation.cjProductOperationDo.UseDB(db, opts...)
	_cjProductOperation.cjProductOperationDo.UseModel(&model.CjProductOperation{})

	tableName := _cjProductOperation.cjProductOperationDo.TableName()
	_cjProductOperation.ALL = field.NewAsterisk(tableName)
	_cjProductOperation.ID = field.NewUint32(tableName, "id")
	_cjProductOperation.ProductID = field.NewUint32(tableName, "product_id")
	_cjProductOperation.OperatorID = field.NewUint32(tableName, "operator_id")
	_cjProductOperation.OperatorName = field.NewString(tableName, "operator_name")
	_cjProductOperation.OperateAt = field.NewTime(tableName, "operate_at")
	_cjProductOperation.OperateType = field.NewUint32(tableName, "operate_type")

	_cjProductOperation.fillFieldMap()

	return _cjProductOperation
}

// cjProductOperation 产品操作
type cjProductOperation struct {
	cjProductOperationDo cjProductOperationDo

	ALL          field.Asterisk
	ID           field.Uint32
	ProductID    field.Uint32 // 产品ID
	OperatorID   field.Uint32 // 操作者ID
	OperatorName field.String // 操作者名
	OperateAt    field.Time   // 操作时间
	OperateType  field.Uint32 // 操作类型 1.增 2.删 3.改 4.复

	fieldMap map[string]field.Expr
}

func (c cjProductOperation) Table(newTableName string) *cjProductOperation {
	c.cjProductOperationDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cjProductOperation) As(alias string) *cjProductOperation {
	c.cjProductOperationDo.DO = *(c.cjProductOperationDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cjProductOperation) updateTableName(table string) *cjProductOperation {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.ProductID = field.NewUint32(table, "product_id")
	c.OperatorID = field.NewUint32(table, "operator_id")
	c.OperatorName = field.NewString(table, "operator_name")
	c.OperateAt = field.NewTime(table, "operate_at")
	c.OperateType = field.NewUint32(table, "operate_type")

	c.fillFieldMap()

	return c
}

func (c *cjProductOperation) WithContext(ctx context.Context) *cjProductOperationDo {
	return c.cjProductOperationDo.WithContext(ctx)
}

func (c cjProductOperation) TableName() string { return c.cjProductOperationDo.TableName() }

func (c cjProductOperation) Alias() string { return c.cjProductOperationDo.Alias() }

func (c cjProductOperation) Columns(cols ...field.Expr) gen.Columns {
	return c.cjProductOperationDo.Columns(cols...)
}

func (c *cjProductOperation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cjProductOperation) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 6)
	c.fieldMap["id"] = c.ID
	c.fieldMap["product_id"] = c.ProductID
	c.fieldMap["operator_id"] = c.OperatorID
	c.fieldMap["operator_name"] = c.OperatorName
	c.fieldMap["operate_at"] = c.OperateAt
	c.fieldMap["operate_type"] = c.OperateType
}

func (c cjProductOperation) clone(db *gorm.DB) cjProductOperation {
	c.cjProductOperationDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cjProductOperation) replaceDB(db *gorm.DB) cjProductOperation {
	c.cjProductOperationDo.ReplaceDB(db)
	return c
}

type cjProductOperationDo struct{ gen.DO }

func (c cjProductOperationDo) Debug() *cjProductOperationDo {
	return c.withDO(c.DO.Debug())
}

func (c cjProductOperationDo) WithContext(ctx context.Context) *cjProductOperationDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cjProductOperationDo) ReadDB() *cjProductOperationDo {
	return c.Clauses(dbresolver.Read)
}

func (c cjProductOperationDo) WriteDB() *cjProductOperationDo {
	return c.Clauses(dbresolver.Write)
}

func (c cjProductOperationDo) Session(config *gorm.Session) *cjProductOperationDo {
	return c.withDO(c.DO.Session(config))
}

func (c cjProductOperationDo) Clauses(conds ...clause.Expression) *cjProductOperationDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cjProductOperationDo) Returning(value interface{}, columns ...string) *cjProductOperationDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cjProductOperationDo) Not(conds ...gen.Condition) *cjProductOperationDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cjProductOperationDo) Or(conds ...gen.Condition) *cjProductOperationDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cjProductOperationDo) Select(conds ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cjProductOperationDo) Where(conds ...gen.Condition) *cjProductOperationDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cjProductOperationDo) Order(conds ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cjProductOperationDo) Distinct(cols ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cjProductOperationDo) Omit(cols ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cjProductOperationDo) Join(table schema.Tabler, on ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cjProductOperationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cjProductOperationDo) RightJoin(table schema.Tabler, on ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cjProductOperationDo) Group(cols ...field.Expr) *cjProductOperationDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cjProductOperationDo) Having(conds ...gen.Condition) *cjProductOperationDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cjProductOperationDo) Limit(limit int) *cjProductOperationDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cjProductOperationDo) Offset(offset int) *cjProductOperationDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cjProductOperationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cjProductOperationDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cjProductOperationDo) Unscoped() *cjProductOperationDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cjProductOperationDo) Create(values ...*model.CjProductOperation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cjProductOperationDo) CreateInBatches(values []*model.CjProductOperation, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cjProductOperationDo) Save(values ...*model.CjProductOperation) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cjProductOperationDo) First() (*model.CjProductOperation, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjProductOperation), nil
	}
}

func (c cjProductOperationDo) Take() (*model.CjProductOperation, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjProductOperation), nil
	}
}

func (c cjProductOperationDo) Last() (*model.CjProductOperation, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjProductOperation), nil
	}
}

func (c cjProductOperationDo) Find() ([]*model.CjProductOperation, error) {
	result, err := c.DO.Find()
	return result.([]*model.CjProductOperation), err
}

func (c cjProductOperationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CjProductOperation, err error) {
	buf := make([]*model.CjProductOperation, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cjProductOperationDo) FindInBatches(result *[]*model.CjProductOperation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cjProductOperationDo) Attrs(attrs ...field.AssignExpr) *cjProductOperationDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cjProductOperationDo) Assign(attrs ...field.AssignExpr) *cjProductOperationDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cjProductOperationDo) Joins(fields ...field.RelationField) *cjProductOperationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cjProductOperationDo) Preload(fields ...field.RelationField) *cjProductOperationDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cjProductOperationDo) FirstOrInit() (*model.CjProductOperation, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjProductOperation), nil
	}
}

func (c cjProductOperationDo) FirstOrCreate() (*model.CjProductOperation, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CjProductOperation), nil
	}
}

func (c cjProductOperationDo) FindByPage(offset int, limit int) (result []*model.CjProductOperation, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cjProductOperationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cjProductOperationDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cjProductOperationDo) Delete(models ...*model.CjProductOperation) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cjProductOperationDo) withDO(do gen.Dao) *cjProductOperationDo {
	c.DO = *do.(*gen.DO)
	return c
}
